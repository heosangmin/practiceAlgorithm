'''
2022/05/15

문자열 뒤집기

0과 1로만 이루어진 문자열 S를 가지고 있다. 이 문자열 S에 있는 모든 숫자를 전부 같게 만들려고 한다. 할 수 있는 행동은 S에서 연속된 하나 이상의 숫자를 잡고 모두 뒤집는 것이다.

예를 들어 S = 0001100일 때

1. 전체를 뒤집으면 1110011이 된다.
2. 4번째 문자부터 5번째 문자까지 뒤집으면 1111111이 되어서 두 번만에 모두 같은 숫자로 만들 수 있다.

하지만, 처음부터 4번째 문자부터 5번째 문자까지 문자를 뒤집으면 한 번에 0000000이 되어서 1번 만에 모두 같은 숫자로 만들 수 있다.

문자열 S가 주어졌을 때 해야하는 행동의 최소 횟수를 출력하라.

(문제가 또 왜 이따위? 테스트 케이스라도 다양하게 주든가 뭔데 이게.)

input cond)
첫 째 줄에 0과 1로만 이루어진 문자열 S가 주어진다. S의 길이는 100만보다 작다.

input)
0001100

output)
1
'''

# 연속된 하나 이상의 숫자만 반전할 수 있다는 것? 연속된 하나 이상??? 하나가 왜 연속이지?
# 그러면 01010101은 행동을 못하는 건가? 하나라도 뒤집을 수 있다는 건가?
# 분명 간단히 풀 수 있는 방법이 있겠지

s = input()

count_0 = s.count("0")
count_1 = s.count("1")

less = "0" if count_0 < count_1 else "1"

result = 0

for i in range(len(s)-1):
    if s[i] == less and s[i] != s[i+1]:
        result += 1

print(result)

# 책의 답안 예시
data = input()
count0 = 0 # 전부 0으로 바꾸는 경우
count1 = 0 # 전부 1로 바꾸는 경우

if data[0] == '1':
    count0 += 1
else:
    count1 += 1

for i in range(len(data) - 1):
    if data[i] != data[i + 1]:
        # 다음 수에서 1로 바뀌는 경우
        if data[i + 1] == '1':
            count0 += 1
        # 다음 수에서 0으로 바뀌는 경우
        else:
            count1 += 1

print(min(count0, count1))