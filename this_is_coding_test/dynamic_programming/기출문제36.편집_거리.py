'''
2022/05/27

두 개의 문자열 A와 B가 주어졌을 때, 문자열 A를 편집하여 문자열 B로 만들고자 한다. 문자열 A를 편집할 때는 다음의 세 연산 중에서 한 번에 하나씩 선택하여 이용할 수 있다.

1. 삽입(insert): 특정한 위치에 하나의 문자를 삽입한다.
2. 삭제(remove): 특정한 위치에 있는 하나의 문자를 삭제한다.
3. 교체(replace): 특정한 위치에 있는 하나의 문자를 다른 문자로 교체한다.

이때 편집 거리란 문자열 A를 편집하여 문자열 B로 만들기 위해 사용한 연산의 수를 의미한다. 문자열 A를 문자열 B로 만드는 최소 편집 거리를 계산하는 프로그램을 작성하라. 예를 들어 "sunday"와 "saturday"의 최소 편집 거리는 3이다.

[풀이]
이 문제는 최소 편집 거리를 담을 2차원 테이블을 초기화한 뒤에, 최소 편집 거리를 계산해 테이블에 저장하는 과정으로 문제를 해결할 수 있다. 다이나믹 프로그래밍의 점화식은 다음과 같다.

1. 두 문자가 같은 경우: dp[i][j] = dp[i - 1][j - 1]
2. 두 문자가 다른 경우: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])

이를 말로 풀어쓰면 다음과 같다.

1. 행과 열에 해당하는 문자가 서로 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
2. 행과 열에 해당하는 문자가 서로 다르다면, 왼쪽(삽입), 위쪽(삭제), 왼쪽 위(교체)에 해당하는 수 중에서 가장 작은 수에 1을 더해 대입

예를 들어 "sunday"를 "saturday"로 변경한다고 해보자. 이때 초기 2차원 테이블은 다음과 같이 구성된다. 왼쪽(열)에 있는 "sunday"라는 문자열을 위쪽(행)에 있는 "saturday"로 변경하는 비용을 계산할 수 있도록 이와 같이 테이블을 구성한 것이다. 또한 여기에서 $\empty$(0,0의 요소)은 빈 문자열을 의미한다. 빈 문자열을 "saturday"로 만들기 위해서는 8개의 문자를 삽입해야 하기 때문에, 테이블의 dp[0][8]의 값은 8이다.

|          | $\empty$ | s | a | t | u | r | d | a | y |
|----------|----------|---|---|---|---|---|---|---|---|
| $\empty$ |       0  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
| s        |          |   |   |   |   |   |   |   |   |
| u        |          |   |   |   |   |   |   |   |   |
| n        |          |   |   |   |   |   |   |   |   |
| d        |          |   |   |   |   |   |   |   |   |
| a        |          |   |   |   |   |   |   |   |   |
| y        |          |   |   |   |   |   |   |   |   |

이제 점화식에 따라서 전체 테이블을 차례대로 갱신해주면 다음과 같다. 2차원 테이블 왼쪽(열)에 있는 문자열을 위쪽(행)에 있는 문자열로 바꾸는 비용을 직관적으로 보여준다. 예를 들어 dp[3][3]의 값은 2인데, 이는 "sum"이라는 문자열을 "sat"이라는 문자열로 바꾸기 위한 최소 편집 거리가 2라는 의미가 된다. 결과적으로 테이블의 가장 오른쪽 아래에 있는 값이 구하고자 하는 최소 편집 거리가 된다. 즉, 아래 예시에서 최소 편집 거리는 3이다.

|          | $\empty$ | s | a | t | u | r | d | a | y |
|----------|----------|---|---|---|---|---|---|---|---|
| $\empty$ |        0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
| s        |        1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
| u        |        2 | 1 | 1 | 2 | 2 | 3 | 4 | 5 | 6 |
| n        |        3 | 2 | 2 | 2 | 3 | 3 | 4 | 5 | 6 |
| d        |        4 | 3 | 3 | 3 | 3 | 4 | 3 | 4 | 5 |
| a        |        5 | 4 | 3 | 4 | 4 | 4 | 4 | 3 | 4 |
| y        |        6 | 5 | 4 | 4 | 5 | 5 | 5 | 4 | 3 |

'''

# 최소 편집 거리(Edit Distance) 계산을 위한 다이나믹 프로그래밍
def edit_distance(str1, str2):
    n = len(str1)
    m = len(str2)

    # 다이나믹 프로그래밍을 위한 2차원 DP 테이블 초기화
    dp = [[0] * (m+1) for _ in range(n+1)]

    # DP 테이블 초기 설정
    for i in range(1, n+1):
        dp[i][0] = i
    for j in range(1, m+1):
        dp[0][j] = j
    
    # 최소 편집 거리 계산
    for i in range(1, n+1):
        for j in range(1, m+1):
            # 문자가 같다면, 왼쪽 위에 해당하는 수를 그대로 삽입
            if str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            # 문자가 다르다면, 3가지 경우 중에서 최솟값 찾기
            else: # 삽입(왼쪽), 삭제(위쪽), 교체(왼쪽 위) 중에서 최소 비용을 찾아 대입
                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])
    
    return dp[n][m]

str1 = "sunday" # input()
str2 = "saturday" # input()

print(edit_distance(str1, str2))
